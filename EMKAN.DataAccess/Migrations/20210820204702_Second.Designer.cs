// <auto-generated />
using System;
using EMKAN.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMKAN.DataAccess.Migrations
{
    [DbContext(typeof(EMKANDbContext))]
    [Migration("20210820204702_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("EMKAN.DataAccess.Model.AuditTrail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Actor")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRoom")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Bulidings");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserID");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("BulidingID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloorNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsColesed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponsibleBuildingManager")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleMaintenanceManager")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleMaintenanceWorker")
                        .HasColumnType("int");

                    b.Property<int>("RoomNo")
                        .HasColumnType("int");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ServiceTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.ServiceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("ServicesCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loginStatus")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceTypeUser", b =>
                {
                    b.Property<int>("ServiceTypesID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ServiceTypesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("ServiceTypeUser");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("TeamsID")
                        .HasColumnType("int");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("TeamsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.AuditTrail", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany("AuditTrails")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Building", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany("Buildings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Reply", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.Service", null)
                        .WithMany("Replies")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany("Replies")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Service", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.ServiceType", null)
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany("Services")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.User", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTypeUser", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("ServiceTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("EMKAN.DataAccess.Model.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMKAN.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.Service", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("EMKAN.DataAccess.Model.User", b =>
                {
                    b.Navigation("AuditTrails");

                    b.Navigation("Buildings");

                    b.Navigation("Replies");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
